<?php

/**
 * @file
 * IP address manager module.
 */

/**
 * Implements hook_permission().
 */
function ip_permission() {
  return array(
    'manage ip addresses' => array(
      'title' => t('Manage IP addresses'),
    ),
  );
}

/**
 * Implements hook_user_login().
 */
function ip_user_login(&$edit, $account) {
  ip_tracker_user_save($account->uid);
}

/**
 * Implements hook_user_insert().
 */
function ip_user_insert(&$edit, $account) {
  global $user;
  // Track anonymous registration (Do not track administration account creation).
  if (empty($user->uid) || $user->uid == $account->uid) {
    ip_tracker_user_save($account->uid);
  }
}

/**
 * Save a record into the ip_tracker table.
 * @NOTE: Maybe you want to check the user uid vs $uid before calling this function.
 */
function ip_tracker_user_save($uid) {
  // Check to see if a row exists for this uid/ip combination.
  $sql = "SELECT visits FROM {ip_tracker} WHERE uid = :uid AND ip = :ip";
  $args = array(':uid' => $uid, ':ip' => ip2long(ip_address()));
  $visits = db_query($sql, $args)->fetchField();

  if ($visits) {
    // Update.
    return db_update('ip_tracker')
      ->fields(
        array(
          'visits' => $visits + 1,
          'last_visit' => REQUEST_TIME,
        )
      )
      ->condition('uid', $uid)
      ->condition('ip', ip2long(ip_address()))
      ->execute();
  }
  else {
    // Insert.
    return db_insert('ip_tracker')
      ->fields(
        array(
          'uid' => $uid,
          'ip' => ip2long(ip_address()),
          'visits' => 1,
          'first_visit' => REQUEST_TIME,
          'last_visit' => REQUEST_TIME,
        )
      )
      ->execute();
  }
}

/**
 * Remove records in the ip_tracker table for a certain user.
 */
function ip_tracker_user_remove($uid) {
  return db_delete('ip_tracker')
    ->condition('uid', $uid)
    ->execute();
}

/**
 * Get the records from the tracker for a user.
 */
function ip_tracker_user_records($uid) {
  $sql = "SELECT * FROM {ip_tracker} WHERE uid = :uid";
  $args = array(':uid' => $uid);
  $result = db_query($sql, $args);
  $rows = array();
  foreach ($result as $row) {
    $row->ip = long2ip($row->ip);
    $rows[] = $row;
  }
  return $rows;
}

/**
 * Get the records from the tracker for an IP.
 */
function ip_tracker_ip_records($ip) {
  $sql = "SELECT * FROM {ip_tracker}";
  $args = array();
  if (!empty($ip)) {
    $sql .= " WHERE ip = :ip";
    $args[':ip'] = ip2long($ip);
  }
  $result = db_query($sql, $args);
  $rows = array();
  foreach ($result as $row) {
    $row->ip = long2ip($row->ip);
    $rows[] = $row;
  }
  return $rows;
}

/**
 * Count how many users have been tracked against an IP.
 */
function ip_tracker_ip_user_count($ip) {
  $sql = "SELECT COUNT(uid) FROM {ip_tracker} WHERE ip = :ip";
  $args = array(':ip' => ip2long($ip));
  $count = db_query($sql, $args)->fetchField();
  return $count;
}

/**
 * Implements hook_node_insert().
 */
function ip_node_insert($node) {
  ip_posts_insert('node', $node->nid);
}

/**
 * Implements hook_comment_insert().
 */
function ip_comment_insert($comment) {
  ip_posts_insert('comment', $comment->cid);
}

/**
 * Insert a record into the cave_tracker table.
 */
function ip_posts_insert($type, $id, $ip_address = NULL) {
  $ip_address = is_null($ip_address) ? ip_address() : $ip_address;
  return db_insert('ip_posts')
    ->fields(
      array(
        'type' => $type,
        'id' => $id,
        'ip' => ip2long($ip_address),
      )
    )
    ->execute();
}

/**
 * Implements hook_cron().
 */
function ip_cron() {
  // Process backlog of nodes.
  ip_backlog_nodes();
  // If nodes are done, process comments.
  if (!variable_get('ip_backlog_nodes', PHP_INT_MAX)) {
    ip_backlog_comments();
  }
}

/**
 * Handle backlog of nodes.
 */
function ip_backlog_nodes() {
  // This variable tracks the last wid.
  $ip_backlog_nodes = variable_get('ip_backlog_nodes', PHP_INT_MAX);
  if ($ip_backlog_nodes) {
    $result = db_query_range(
      "SELECT wid, hostname, link" .
      " FROM {watchdog}" .
      " WHERE type = 'content'" .
      " AND message = :msg" .
      " AND wid < :backlog_nodes" .
      " ORDER BY wid DESC",
      0,
      20,
      array(
        ':msg' => '@type: added %title.',
        ':backlog_nodes' => $ip_backlog_nodes,
      )
    );

    $row_count = 0;
    foreach ($result as $row) {
      $nid = str_replace(array('<a href="' . base_path() . 'node/', '">view</a>'), array('', ''), $row->link);
      // Test the node.
      $node = node_load($nid);
      if (!empty($node)) {
        ip_posts_insert('node', $nid, $row->hostname);
      }
      $row_count++;
      variable_set('ip_backlog_nodes', $row->wid);
    }

    if (!$row_count) {
      // Mark as finished.
      variable_set('ip_backlog_nodes', 0);
    }
  }
}

/**
 * Handle backlog of comments.
 */
function ip_backlog_comments() {
  if (module_exists('comment')) {
    $result = db_query_range(
      "SELECT c.cid AS cid, c.hostname AS hostname" .
      " FROM {comment} c" .
      " LEFT JOIN {ip_posts} i" .
      " ON i.type = 'comment'" .
      " AND (c.cid = i.id OR i.id IS NULL)" .
      " WHERE i.id IS NULL" .
      " ORDER BY c.cid DESC",
      0,
      50
    );
    foreach ($result as $row) {
      ip_posts_insert('comment', $row->cid, $row->hostname);
    }
  }
}

/**
 * Implements hook_views_api()
 */
function ip_views_api() {
  return array(
    'api'  => views_api_version(),
    'path' => drupal_get_path('module', 'ip') . '/views',
  );
}

// @todo duplicate finder.
// @todo attach our module's data to nodes/comments ?
// @todo delete from posts table when object (node/comment) is deleted.
// @todo something like hook_user_operations, but hook_ip_operations
// @todo handle deleting of comments and nodes.
